Online Python Tutor
Copyright (C) 2010 Philip J. Guo (philip@pgbovine.net)
https://github.com/pgbovine/OnlinePythonTutor/

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

======
Introduction:

The Online Python Tutor is a web application where you can type Python
scripts directly in your web browser, execute those scripts, and
single-step FORWARDS AND BACKWARDS through execution in order to view
the state of run-time data.

Using this application, teachers and students can write small Python
code snippets together and see what happens to the data structures when
the code gets executed.

---

Try it out live at: http://people.csail.mit.edu/pgbovine/python/

---
Original vision (from January 2010):

I want to create a web-based interactive learning platform for students
to explore programming.  I envision an HTML UI where a student can enter
in code and then single-step through it and see how the data structures
change during execution.

I realized that for the small programs that students write, it might be
possible to simply LOG all execution (and data structures) and then we
can simply play it back with single-step forwards and also BACKWARDS

After all, we don't need students to be able to interactive probe and
make changes in the middle of execution, which is the only value-added
of a REAL debugger.

What kinds of things do we want to log?

  On the execution of each line, log:
    - the line number just executed
    - all data created by the program

  Also log calls and returns of a student's function 
  (NOT library functions)

We can use the Python JSON module to encode data structures in JSON and
send it to the client's web browser

The PDB debugger (Lib/pdb.py) is written in pure Python:
  http://docs.python.org/library/pdb.html
  - the bdb debugger framework is the C module that pdb calls
    http://docs.python.org/library/bdb.html

---

Informal system architecture overview --- sent in an email on 2010-09-05

'''
i'll give you a bit of background on the architecture of the system:

1.) The front-end is HTML/javascript (using the jQuery library) ... it's
responsible for the input text box, submitting the Python code (as
plaintext) to the backend, receiving an execution trace from the
backend, and then rendering that trace as data structure visualizations.
all the front-end code is already publicly available in these 5 files:

http://people.csail.mit.edu/pgbovine/python/index.html
http://people.csail.mit.edu/pgbovine/python/jquery-1.3.2.min.js
http://people.csail.mit.edu/pgbovine/python/jquery.textarea.js
http://people.csail.mit.edu/pgbovine/python/edu-python.js
http://people.csail.mit.edu/pgbovine/python/edu-python.css


2.) The back-end is a server-side app that takes Python script source
code as input, executes the entire script (up to 100 executed lines, to
prevent infinite loops), and collects a full trace of all variable
values after each line is executed.  It then sends that trace to the
front-end in an encoded JSON format.  The front-end then parses that
trace, which is how it's able to single-step forwards AND backwards
through execution.

The back-end currently runs on my server, and I think the most
convenient thing to do right now is to simply invoke it as a web
service.  This is the URL:

http://people.csail.mit.edu/pgbovine/python/cgi-bin/web_exec.py

and it expects only ONE following parameter to be passed in via POST.
that parameter is called 'user_script', and it's a string that contains
the text of the script to be executed.  so the interface is pretty
simple ;)
'''

